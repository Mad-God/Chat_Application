create a test.ini file in root folder
 set the SETTINGS and python_files configurations,
 which will search the whole project directory for python files that follw the naming convention

pip install django-pytest

create test.py files or folderrs inside apps or in root directory, 
    import pytest

    # write test or multiple tests in the file

    def test_func():
        assert _something_:


use pytest command in console to run all the tests
    -x: this flag is used to stop testing whenever any test fails
    -rP: to print the additional print statements in a test to the console 

markers:
    identifies special tests with decorators
    use @pytest.mark._marker_name_ to set a marker on a test
    some of the markers are:
        xfail: for tests that are sure to fail
        skip: for tests that are to be skipped
    you can also create your own markers in the test.ini file





Pattern for writting tests:
    arrange: whatever needs to be done before the test takes place
    act: perform the operation that need to be tested
    assert: assert that the operation has yeilded the desired output


CONFTEST.py 
    this file is used to store fixtures and other configuartions that are going to be used by the other tests


Fixtures:
    can be run before/after a test 
    used for the purpose liking to feed data to tests like db connections, URLs to test and input data 

    to declare fixtures, use the decorator: @pytest.fixtures
    to use fixtures, pass their names as parameters to the test functions

    scope of fixtures:
        we can specify scope of a fixture to control how many times a fixture is called for test sets;
         we can do this by setting the 'scope' parameter in the fixture function's parameters. 
        Some of the values for scope of fixture(given as strings) are:
            function:   to run fixture once per function (default)
            class:      to run fixture once per class
            module:     to run fixture once per module
            session:    to run fixture once per session

        we can also setup fixtures to be called after a test, through several ways, such as:
            using yeild keyword to return a value in the middle of a codeblock and the rest of the block is 
            executed after the test is run 
 

    Using DB in our tests:
        using the @pytest.mark.django_db decorator 
            when we want to access data within our test, like create, count etc

    Using DB in our fixtures:
        we pass it as a parameter to the fixture definition
            when we want to access data from a fixture, the DB persists over the tests, 
    


    
    While we are testing, a test DB is created and tests are run on that DB.
     Hence, this DB wont persist over seprated test.
    
    You can also place your fixtures in a separate file and they will still be utilised by test w/o having to import

Fixture Factories:
    Used to reduce the number of fixtures. 



FACTORIES: 
    create a factories file, and a class inside that extends DjangoModelFactory

    provide the Meta.class and any additional feilds that you may want

    register the factory class in conftest.py file
     



 
PARAMETERIZING:
    allows us to define multiple sets of aruguments at the test function or class.
    checking mltiple input leads to the expected output leads

    this is done using the @pytest.mark.parameterize() decorator.
    example:
     @pytest.mar.parameterize(
        "param1, param2, param3, ...., paramx, validity_param",[
            ("val 1", v2, [v3], ...... valX, validity),
            ("val 1", v2, [v3], ...... valX, validity),
            ...
        ]
     )
     def test_name(
        db, test_factory, param1, param2, param3 , ...., paramx, validity_param)
     ):
        test = test_Factory(param1, param2, param3, ..., paramx, validity_param)
        assert statement

    Here, the tests are run for each set of parameters in the decorator separately,
     so we can alter the input to test various scenarios of our application.
    We use a validity_param to flag wether a given set of parameters is valid or not, then we can check against it after the test has returned the results
     This parameter can be anything from a simple True/False indicating validity of data to the response code that is expected from a request.
    

     
    
    You can also use actual django forms for testing by defining failchecks in the form as methods. Then, use the form to take and validate the data. 
    You can even test requests with a given set of parameters and check the response code returned inside a test. 